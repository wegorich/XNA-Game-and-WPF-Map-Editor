<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:uiLogic="clr-namespace:LevelEditor.UILogic">
  <uiLogic:NegativeDoubleConverter x:Key="negativeDoubleConvert" />
  <uiLogic:TypeToBitmapMultiValueConverter x:Key="typePreview" />

  <!--Main item style-->
  <Style x:Key="Item_Style">
    <Setter Property="Border.Background" Value="{StaticResource Window_Background}" />
    <Setter Property="TextBlock.Foreground" Value="{StaticResource Window_Foreground}" />
  </Style>
  <!--MenuItem style-->
  <Style x:Key="MenuItem_Style" TargetType="{x:Type MenuItem}">
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style>
          <Setter Property="TextBlock.Foreground" Value="{StaticResource Text_Color}" />
        </Style>
      </Setter.Value>
    </Setter>
  </Style>
  <!--Grid spliter-->
  <Style x:Key="GridSplitter_Vertical" TargetType="{x:Type GridSplitter}">
    <Setter Property="Width" Value="1" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Background" Value="{StaticResource Window_Background}" />
  </Style>
  <!--Tab Item-->
  <Style x:Key="{x:Type TabItem}" TargetType="{x:Type TabItem}" BasedOn="{StaticResource Item_Style}">
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="FontWeight" Value="DemiBold" />
    <Setter Property="Padding" Value="3,0" />
    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <ContentPresenter Content="{TemplateBinding Content}">
            <ContentPresenter.LayoutTransform>
              <RotateTransform Angle="90" />
            </ContentPresenter.LayoutTransform>
          </ContentPresenter>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsSelected" Value="true">
        <Setter Property="BorderBrush" Value="{StaticResource TabItem_Border_Brush}" />
        <Setter Property="Foreground" Value="{StaticResource Text_Color}" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="BorderBrush" Value="{StaticResource TabItem_Border_Brush}" />
        <Setter Property="Foreground" Value="{StaticResource TabItem_Border_Brush}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <!--Scroll Viewer-->
  <Style x:Key="{x:Type ScrollViewer}" TargetType="{x:Type ScrollViewer}">
    <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
  </Style>
  <!--List Box Item-->
  <Style TargetType="{x:Type ListBoxItem}" x:Key="{x:Type ListBoxItem}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Panel.ZIndex" Value="99999" />
        <Setter Property="UIElement.RenderTransform">
          <Setter.Value>
            <ScaleTransform ScaleX="1.10" ScaleY="1.10" CenterY="10" CenterX="5"></ScaleTransform>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="false">
        <Setter Property="Panel.ZIndex" Value="0" />
        <Setter Property="UIElement.RenderTransform">
          <Setter.Value>
            <ScaleTransform ScaleX="1" ScaleY="1" CenterY="0"></ScaleTransform>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <!--List box-->
  <Style TargetType="{x:Type ListBox}" x:Key="{x:Type ListBox}">
    <Setter Property="BorderThickness" Value="0" />
  </Style>
  <!--Text Block-->
  <Style x:Key="{x:Type TextBlock}" TargetType="{x:Type TextBlock}">
    <Setter Property="Margin" Value="5,2" />
    <Setter Property="Text" Value="{Binding}" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>
  <!--Button-->
  <Style x:Key="MapClose" TargetType="{x:Type Button}">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="Width" Value="15" />
    <Setter Property="Height" Value="15" />
    <Setter Property="Foreground" Value="{StaticResource Window_Background}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Border Background="{TemplateBinding Background}" Width="{TemplateBinding Width}"
                  Height="{TemplateBinding Height}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
            <Canvas ClipToBounds="True" Width="10" Height="10" HorizontalAlignment="Center"
                    VerticalAlignment="Center">
              <Line X1="0" Y1="0" X2="9" Y2="9" Stretch="Uniform" StrokeThickness="1"
                    Stroke="{TemplateBinding Foreground}" />
              <Line X1="0" Y1="9" X2="9" Y2="0" StrokeThickness="1" Stretch="Uniform"
                    Stroke="{TemplateBinding Foreground}" />
            </Canvas>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Background" Value="{StaticResource Window_Foreground}" />
        <Setter Property="BorderBrush" Value="{StaticResource Path_Stroke_Color}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="true">
        <Setter Property="Background" Value="{StaticResource Path_Stroke_Color}" />
        <Setter Property="BorderBrush" Value="{StaticResource Window_Background}" />
        <Setter Property="Foreground" Value="{StaticResource Window_Foreground}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <!--Toggle button-->
  <Style TargetType="{x:Type ToggleButton}" x:Key="{x:Type ToggleButton}">
    <Setter Property="Padding" Value="5,0" />
    <Setter Property="Background" Value="{StaticResource ToggleButton_Background}" />
    <Setter Property="Foreground" Value="{StaticResource Text_Color}" />
    <Setter Property="FontWeight" Value="Bold" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Border BorderBrush="{TemplateBinding Foreground}" Background="{TemplateBinding Background}">
            <Grid Margin="{TemplateBinding Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="7" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>

              <Polygon x:Name="Path" Height="10" SnapsToDevicePixels="True" Points="2,8 2,2 5,5"
                       VerticalAlignment="Center" HorizontalAlignment="Left" StrokeThickness="1" Stroke="{TemplateBinding Foreground}"
                       Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.25,0.5" />
              <ContentPresenter Grid.Column="1" Content="{TemplateBinding Property=Button.Content}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="Path" Property="RenderTransform">
                <Setter.Value>
                  <RotateTransform Angle="45" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="false">
              <Setter TargetName="Path" Property="Fill" Value="{StaticResource ToggleButton_Background}" />
              <Setter TargetName="Path" Property="Stroke" Value="{StaticResource Path_Stroke_Color}" />
            </Trigger>
          </ControlTemplate.Triggers>

        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--Text Box-->
  <Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}">
    <Setter Property="Margin" Value="0,1" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="AllowDrop" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBoxBase}">
          <Border Padding="2,1" x:Name="Border" Background="{StaticResource ToggleButton_Background}"
                  BorderBrush="{StaticResource TabItem_Border_Brush}" BorderThickness="1" CornerRadius="2">
            <ScrollViewer x:Name="PART_ContentHost" Margin="0" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
              <Setter TargetName="Border" Property="Background"
                      Value="{StaticResource Border_Error_Background}" />
              <Setter TargetName="Border" Property="BorderBrush"
                      Value="{StaticResource Border_Error_BorderBrush}" />
              <Setter TargetName="Border" Property="CornerRadius" Value="0" />
            </Trigger>
            <Trigger Property="IsFocused" Value="true">
              <Setter TargetName="Border" Property="Background"
                      Value="{StaticResource Window_Foreground}" />
              <Setter TargetName="Border" Property="BorderBrush"
                      Value="{StaticResource Window_Background}" />
              <Setter TargetName="Border" Property="CornerRadius" Value="0" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Border" Property="Background"
                      Value="{StaticResource ToggleButton_Background}" />
              <Setter TargetName="Border" Property="BorderBrush"
                      Value="{StaticResource ToggleButton_Background}" />
              <Setter Property="Foreground" Value="{StaticResource Window_Background}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--Uniform Grid-->
  <Style x:Key="{x:Type UniformGrid}" TargetType="{x:Type UniformGrid}">
    <Setter Property="Margin" Value="5,2" />
    <Setter Property="Columns" Value="2" />
    <Setter Property="VerticalAlignment" Value="Top" />
  </Style>
  <!--Private prop Unifrom Grid-->
  <Style x:Key="PrivatePropScrollViewer" TargetType="{x:Type ScrollViewer}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding Type}" Value="BirdType">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate>
              <UniformGrid>
                <TextBlock Text="X" />
                <TextBox MaxLength="3"
                         Text="{Binding Path=CenterX, Mode=TwoWay, ValidatesOnDataErrors=True}" />
                <TextBlock Text="Y" />
                <TextBox MaxLength="3"
                         Text="{Binding Path=CenterY, Mode=TwoWay, ValidatesOnDataErrors=True}" />
                <TextBlock Text="Rotation" />
                <TextBox MaxLength="3"
                         Text="{Binding Path=Rotation, Mode=TwoWay, ValidatesOnDataErrors=True}" />
                <TextBlock Text="ZIndex" />
                <TextBox MaxLength="3"
                         Text="{Binding Path=ZIndex, Mode=TwoWay, ValidatesOnDataErrors=True}" />
              </UniformGrid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </DataTrigger>
      <DataTrigger Binding="{Binding Type}" Value="PigType">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate>
              <UniformGrid>
                <TextBlock Text="X" />
                <TextBox MaxLength="3"
                         Text="{Binding Path=CenterX, Mode=TwoWay, ValidatesOnDataErrors=True}" />
                <TextBlock Text="Y" />
                <TextBox MaxLength="3"
                         Text="{Binding Path=CenterY, Mode=TwoWay, ValidatesOnDataErrors=True}" />
                <TextBlock Text="Rotation" />
                <TextBox MaxLength="3"
                         Text="{Binding Path=Rotation, Mode=TwoWay, ValidatesOnDataErrors=True}" />
              </UniformGrid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </DataTrigger>

      <DataTrigger Binding="{Binding Type}" Value="BlockType">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate>
              <UniformGrid>
                <TextBlock Text="X" />
                <TextBox MaxLength="3"
                         Text="{Binding Path=CenterX, Mode=TwoWay, ValidatesOnDataErrors=True}" />
                <TextBlock Text="Y" />
                <TextBox MaxLength="3"
                         Text="{Binding Path=CenterY, Mode=TwoWay, ValidatesOnDataErrors=True}" />
                <TextBlock Text="Rotation" />
                <TextBox MaxLength="3"
                         Text="{Binding Path=Rotation, Mode=TwoWay, ValidatesOnDataErrors=True}" />
                <TextBlock Text="Material" />
                <ComboBox ItemsSource="{Binding ElementName=material,Path=ItemsSource}"
                          SelectedValue="{Binding Path=Material, Mode=TwoWay, ValidatesOnDataErrors=True}" />
              </UniformGrid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <!--Expander -->
  <Style x:Key="ExpanderBase" TargetType="{x:Type Expander}">
    <Setter Property="IsExpanded" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Expander}">
          <Border>
            <DockPanel Background="{StaticResource Window_Foreground}">
              <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}"
                            Content="{TemplateBinding Header}" DockPanel.Dock="Top"
                            IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
              <ContentPresenter x:Name="ExpandSite" Visibility="Collapsed" />
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="true">
              <Setter Property="Visibility" Value="Visible" TargetName="ExpandSite" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>

      </Setter.Value>
    </Setter>
  </Style>
  <!--Enum Types-->
  <Style x:Key="EnumTypes" TargetType="{x:Type Expander}" BasedOn="{StaticResource ExpanderBase}">
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <ListBox
ItemsSource="{Binding
                        RelativeSource={RelativeSource
                        Mode=FindAncestor,
                        AncestorType={x:Type Expander}},
                        Path=DataContext}"
SelectedValue="{Binding ElementName=window, Path=Current.AddObject,Mode=TwoWay}">
            <ItemsControl.ItemsPanel>
              <ItemsPanelTemplate>
                <StackPanel />
              </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
              <DataTemplate>
                <StackPanel Orientation="Horizontal">
                  <Image HorizontalAlignment="Center" Width="15">
                    <Image.Source>
                      <MultiBinding Converter="{StaticResource typePreview}">
                        <Binding ElementName="window" Path="Current.Map" />
                        <Binding />
                        <Binding Path="Tag"
                                 RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type Expander}}" />
                      </MultiBinding>
                    </Image.Source>
                  </Image>
                  <TextBlock Text="{Binding}"></TextBlock>
                </StackPanel>
              </DataTemplate>
            </ItemsControl.ItemTemplate>
          </ListBox>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>